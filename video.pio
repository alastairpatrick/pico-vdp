.PROGRAM video
.SIDE_SET 2 OPT
.ORIGIN 0
.DEFINE pixel_cycles 2

PUBLIC handle_display:
  OUT PINS, 8
  JMP X-- handle_display

  MOV PINS, NULL
  JMP entry

PUBLIC handle_non_display:
  MOV PINS, NULL
  JMP X-- handle_non_display

PUBLIC entry:
  OUT X, 11       // 0
  OUT EXEC, 16    // 1 & 2, sync state change on 2
  OUT PC, 5       // 3 
  
% c-sdk {
static inline void video_program_init(PIO pio, uint sm, uint offset, uint rgb_pins, uint sync_pins, int pio_clk_div) {
  const int NUM_RGB_PINS = 8;
  for (int i = 0; i < NUM_RGB_PINS; ++i) {
     pio_gpio_init(pio, rgb_pins + i);
  }
  pio_sm_set_consecutive_pindirs(pio, sm, rgb_pins, NUM_RGB_PINS, true);

  const int NUM_SYNC_PINS = 8;
  for (int i = 0; i < NUM_SYNC_PINS; ++i) {
     pio_gpio_init(pio, sync_pins + i);
  }
  pio_sm_set_consecutive_pindirs(pio, sm, sync_pins, NUM_SYNC_PINS, true);

	pio_sm_config c = video_program_get_default_config(offset);
  sm_config_set_out_pins(&c, rgb_pins, 8);
  sm_config_set_sideset_pins(&c, sync_pins);
  sm_config_set_out_shift(&c, true /*right shift*/, true /*auto-pull*/, 32);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
	pio_sm_init(pio, sm, video_offset_entry, &c);
  pio_sm_set_clkdiv_int_frac(pio, 0, pio_clk_div >> 8, pio_clk_div & 0xFF);
	pio_sm_set_enabled(pio, sm, true);
}
%}