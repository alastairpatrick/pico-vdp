; D0      <- IN, OUT, SET first
; D1
; D2
; D3
; D4
; D5      <- SIDE first
; D6
; D7      <- OUT, SET last
; /RD     <- JMP PIN


; PIO 1 SM 0
; 14 instructions
; Port RSEL (read/write)
; X holds the selected register index.
; Y holds the most significant 23 bits of the READ_ADDR and WRITE_ADDR DMA channel registers modified on write.
; Memory addresses are for 16-bit words so CPU can detect register changes by watching for high 8-bits
; being zero-ed by DMA controller on write.
.PROGRAM sys80_rsel
.SIDE_SET 3 OPT PINDIRS
.DEFINE PUBLIC cs_pin 26

write:
  MOV X, PINS
  IN Y, 23
  IN X, 8   
  IN NULL, 1                        ; auto-push to READ_ADDR
  IN Y, 23
  IN NULL, 1                        ; WRITE_ADDR has bit 8 forced zero so high registers are read-only
  IN X, 7
  IN NULL, 1                        ; auto-push to WRITE_ADDR

PUBLIC entry:  
.WRAP_TARGET
  WAIT 1 GPIO cs_pin
  SET PINDIRS, 0b00000  SIDE 0b000
  WAIT 0 GPIO cs_pin
  JMP PIN write

read:
  MOV PINS, X
  SET PINDIRS, 0b11111  SIDE 0b111
  .WRAP



; PIO 1 SM 1
; 7 instructions
; Port RDAT (read) accesses the register addressed by port RSEL.
.PROGRAM sys80_read_rdat
.SIDE_SET 3 OPT PINDIRS
.DEFINE PUBLIC cs_pin 22

PUBLIC entry:
.WRAP_TARGET
  WAIT 1 GPIO cs_pin
  SET PINDIRS, 0b00000  SIDE 0b000
  WAIT 0 GPIO cs_pin

  PUSH                            ; Triggering the DMA controller is on the critical path
                                  ; for read requests so it happens before even knowing
                                  ; if this is a read or a write request.
  JMP PIN write                   ; Only output on read request. Happens in parallel with DMA controller.
  SET PINDIRS, 0b11111  SIDE 0b111; In parallel with DMA controller.
write:
  OUT PINS, 8                     ; Auto-pull register data from TX FIFO, blocking on DMA controller.
                                  ; For write requests, this won't actually be output.
  .WRAP


; PIO 0 SM 2
; 5 instructions
; Port RDAT (write) accesses the register addressed by port RSEL.
.PROGRAM sys80_write_rdat
.SIDE_SET 3 OPT PINDIRS
.DEFINE PUBLIC cs_pin 22

write:
  PUSH                            ; Push dummy value to chain to DMA channel which
                                  ; will write register data to internal SRAM.
  IN PINS, 8                      ; auto-push register data

PUBLIC entry:
.WRAP_TARGET
  WAIT 1 GPIO cs_pin
  WAIT 0 GPIO cs_pin
  JMP PIN write                   ; skip reads
  .WRAP


; PIO 1 SM 3
; 10 instructions
; Port FIFO (write) Streams data to blitter.
; Port FIFO (read) Returns whether blitter FIFO is ready to receive at least 4 bytes without overflow.
.PROGRAM sys80_fifo
.SIDE_SET 3 OPT PINDIRS
.DEFINE PUBLIC cs_pin 27

write:
  MOV X, STATUS                   ; emulate a 1 deep FIFO latch by only writing if FIFO is empty
  JMP !X entry

  IN PINS, 8                      ; Auto-push data. FIFO is known to be empty so this never blocks.
  PUSH                            ; Push dummy value. Never blocks.

PUBLIC entry:
.WRAP_TARGET
  WAIT 1 GPIO cs_pin
  SET PINDIRS, 0b00000  SIDE 0b000

  WAIT 0 GPIO cs_pin
  JMP PIN write

read:
  MOV PINS, STATUS
  SET PINDIRS, 0b11111  SIDE 0b111
  .WRAP


% c-sdk {
static inline void sys80_program_init(PIO pio, uint sm, uint offset) {
  const static uint sm_wrap[4] = {
    sys80_rsel_wrap,
    sys80_read_rdat_wrap,
    sys80_write_rdat_wrap,
    sys80_fifo_wrap,
  };

  const static uint sm_wrap_target[4] = {
    sys80_rsel_wrap_target,
    sys80_read_rdat_wrap_target,
    sys80_write_rdat_wrap_target,
    sys80_fifo_wrap_target,
  };

  const static uint sm_entry[4] = {
    sys80_rsel_offset_entry,
    sys80_read_rdat_offset_entry,
    sys80_write_rdat_offset_entry,
    sys80_fifo_offset_entry,
  };

  const static int sm_pull_level[4] = {
    8,
    8,
    8,
    -1,
  };

  const static bool sm_auto_pull[4] = {
    true,
    true,
    true,
    false,
  };

  const static int sm_push_level[4] = {
    32,
    8,
    8,
    8,
  };

  const static bool sm_auto_push[4] = {
    true,
    true,
    true,
    true,
  };

  const static bool sm_push_dir[4] = {
    false,
    false,
    false,
    false,
  };

  pio_sm_config c = pio_get_default_sm_config();

  sm_config_set_wrap(&c, offset + sm_wrap_target[sm], offset + sm_wrap[sm]);

  sm_config_set_in_pins(&c, DATA_PINS);
  sm_config_set_in_shift(&c, sm_push_dir[sm], sm_auto_push[sm], sm_push_level[sm]);

  sm_config_set_out_pins(&c, DATA_PINS, 8);
  sm_config_set_out_shift(&c, false, sm_auto_pull[sm], sm_pull_level[sm]);

  sm_config_set_set_pins(&c, DATA_PINS, 5);

  sm_config_set_sideset(&c, 4, true, true);  // Must match .SIDE_SET directive
  sm_config_set_sideset_pins(&c, DATA_PINS + 5);

  sm_config_set_jmp_pin(&c, RD_PIN);

  sm_config_set_mov_status(&c, STATUS_RX_LESSTHAN, 1);

  pio_sm_set_consecutive_pindirs(pio, sm, DATA_PINS, 8, false /*pindir*/ );

  pio_sm_init(pio, sm, offset + sm_entry[sm], &c);
	pio_sm_set_enabled(pio, sm, true);
}
%}
